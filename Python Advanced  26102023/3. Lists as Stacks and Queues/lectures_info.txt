Stacks -> last-in, first-out # LIFO
Queues -> first-in, first-out  # FIFO
Priority queue -> mode optimal out

Data Structures
-----------------------
#Linear
    List
    Queue, Stack

#Hashsets
    Dictionary
    Set

#Tree

#Graphs
-----------------------

Stacks
    A stack is a linear data structure that stores items  # s = [] - create an empty list | stack
        push - adding data, to the top of the stack # (s.append(x)) - correct
                                                    # s.insert(0, 1) - very wrong
        pop - retrieving data, the top element      # (s.pop()) - correct
                                                    # s.pop(0) - very wrong
        peek - return the top element               # (print(s.[-1])
                                                    # print(s.[0]) - very wrong

        len - count of elements in stack (print(len(s))

        LIFO - last-in, first-out

-----------------------

Queue
    A queue is a first-in first-out (FIFO) abstract data type.
    We use them when we want things to happer in the order that they were called

    It is possible to use a list as a queue, however they are not efficient for this purpose
    Doing inserts or pops from the begging of the list is SLOW
    That's why we use collections.queue
    We use append() to add to the queue and popleft() to remove from queue

        q = deque()

        # Enqueue, push, add
            q.append(1)         # q.popleft()
            q.appendleft(2)     # q.pop()

        # Dequeue, remove, pop
            q.popleft()
            q.pop()

        # Peek
            print(q[0])

        # Count

        -------------------------------------------------

        # Judge submission
        3 parallel submission

        s1, s2, s3, s4, s5, s6, s7 # task to be done

        # Queue
        SE1 - s1, s6
        SE2 - s2, s4
        SE3 - s3, s5, s7

        # Stack
        SE1 - s7, s2
        SE2 - s6, s4
        SE3 - s5, s3, s1

        -------------------------------------------------