Tuples:
-------------------------------------
    Tuples are immutable* objects
        * but the objets, inside the tuples, are mutable
    Tuples cannot be changed unlike lists

Examples:

t = (1, 2, 3, 4, 5) or t = 1, 2, 3, 4, 5
print(id(t)) # memory location

t = (1, 2, 3, 4)
print(id(t))

Methods:
    There are only two available tuple methods:
        - count - return the number of times a specified value occurs

            numbers = (1, 2, 1, 3, 1)
            numbers.count(1) # result = 3

        - index - returns the index of a particular element
            names = ("Pesho", "Gosho", "Gosho")
            names.index("Gosho") # result = 1

            names.index("Gosho", 1) # from 1-st index direction right
                result would be 2

Unpacking:
 t = ( 1, 4, 6)
 x, y, z  = t # x = 1, y = 4, z = 6

 Enumerate:
 t = list(range(5, 16))
 for index, value in enumerate(t): # unpack the list using unpacking to obtain `index` and `values`
    print(f' tuple[{index}] = {value}')

 *NO SUCH THING AS TUPLE COMPREHENSION, THIS IS GENERATOR
 -------------------------------------------

   * but the objets, inside the tuples, are mutable

   tt = (
    [1, 2, 3]
    {}
    (5, 5, 6)
   )
   print(tt) # ([1, 2, 3], {}, (5, 5, 6))

   tt[0].append(-4) and tt[1]['key'] = 'new_value' #     print(tt) # ([1, 2, 3, -4], {'key':'new_value'}, (5, 5, 6))

   -------------------------------------------
   -------------------------------------------
   Sets ( множества )

    -   Search, add, remove is very, very fast
    -   Contains only unique values
        -*unique value (with hash tables)
    -   Unordered   (with tree)

    ss = {1, 2, 3, 4, 5}
    print(ss)
    [ss.add(1) for _ in range (1024)]
    print(ss) # this will confirm that the set contains only unique values

    # this is a dictionary not a set
    dictionary = {
        '1': 1,
        '2': 2,
        '3': 3,
        '4': 4,
        '5': 5,
    }

        - to create a empty set use:
         ss = set()


    # add
    ss.add(8)

    # remove
    ss.remove(8)

    # check if value is in set
    print(4 in ss)
    print(5 in ss)


    Example show how faster is set :
    ----------------------------------------------------
    import time

    ll = list(range(1024 * 32))
    ss = set(ll)

    result = False
    start = time.time()
    for v in ss:
        result = v in ss
    end = time.time()
    print(f'Set: {end - start} s'


    result = False
    start = time.time()
    for v in ll:
        result = v in ll
    end = time.time()
    print(f'Set: {end - start} s'
    ----------------------------------------------------

    Operators:
    a = set([1, 2, 3, 4])
    b = set(3, 4, 5, 6])

    a | b # Union        -> {1, 2, 3, 4, 5, 6}
    a & b # Intersection -> {3, 4}
    a < b # Subset (issubset)       -> False
    a - b # Difference   -> {1, 2}

    Set Comprehension
        Set comprehension are pretty similar to list comprehension, the only difference is set use curly braces
        nums = [1, 2, 3, 4, 4, 5, 6, 2, 1]
        unique = {num for num in nums}
        # {1, 2, 3, 4, 5, 6}